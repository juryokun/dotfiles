#=============================================================================================
# LAZY LOAD PLUGINS
#=============================================================================================

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# COMPLETION

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
    autocmd FileType python setlocal completeopt-=preview
    autocmd FileType python setlocal omnifunc=jedi#completions 
    let g:jedi#auto_initialization = 0
    let g:jedi#auto_vim_configuration = 0
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
depends = ['deoplete.nvim']

# completion ()
[[plugins]]
repo = 'MetalPhaeton/easybracket-vim'
on_i = 1

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'smarty']
hook_source = '''
    let g:user_emmet_leader_key='<c-q>'
'''

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MARKDOWN

# [[plugins]]
# repo ='tpope/vim-markdown'
# on_ft = 'markdown'
# hook_source = '''
#     au BufNewFile,BufReadPost *.md set filetype=markdown
# '''

# [[plugins]]
# repo = 'kannokanno/previm'
# on_ft = 'markdown'
# hook_source = '''
#     let g:previm_open_cmd="w-start.sh"
#     let g:previm_enable_realtime=1
# '''
#
# [[plugins]]
# repo = 'tyru/open-browser.vim'
# on_ft = 'markdown'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# OTHERS

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_source = '''
    let g:neosnippet#snippets_directory = '~/.config/nvim/rc/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets,~/.config/nvim/rc/.snippets'
    " Plugin key-mappings.
    imap <C-l>     <Plug>(neosnippet_expand_or_jump)
    smap <C-l>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-l>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1
depends = 'neosnippet'
